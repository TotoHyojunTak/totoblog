# github repository Actions 페이지에 나타낼 이름
name: toto blog cicd

# event trigger
on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    ## create application-prod.yaml
#     - name: create application-prod.yaml
#       if: contains(github.ref, 'main')
#       run: |
#           cd ./src/main/resources
#           touch ./application-prod.yaml
#           echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.yaml
#       shell: bash

    ## create application-dev.yaml
#     - name: create application-dev.yaml
#       ## if: contains(github.ref, 'develop')
#       run: |
#         cd ./src/main/resources
#         touch ./application-dev.yaml
#         echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yaml
#         touch ./application.yaml
#         echo "${{ secrets.PROPERTIES_COMMON }}" > ./application.yaml        
#       shell: bash

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test

    ## docker build & push to production
#     - name: Docker build & push to prod
#       if: contains(github.ref, 'main')
#       run: |
#           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#           docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_FULL_REPO }} .
#           docker push ${{ secrets.DOCKER_FULL_REPO }
          
    ## docker build & push to develop
    - name: DOCKER - Set up QEMU
      uses: docker/setup-qemu-action@v1
      
    - name: DOCKER - Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}      
      
#     - name: DOCKER - Login to DockerHub
#       uses: docker/login-action@v1
#       with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    - name: DOCKER - Docker build and push to dev
#       uses: docker/build-push-action@v2
#       id : docker_build
#       with:
#         push: true
#         tags: ${{ secrets.DOCKER_FULL_REPO }
#         cache-from: type=local,src=/tmp/.buildx-cache
#         cache-to: type=local,dest=/tmp/.buildx-cache-new
      run: 
        echo pwd
        docker build . -t ${{ secrets.DOCKER_FULL_REPO }} 
        docker push ${{ secrets.DOCKER_FULL_REPO }} 
        
        
#     - name: DOCKER - Image digest
#       run: echo ${{ steps.docker_build.outputs.digest }}
      
#           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#           docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_FULL_REPO }} .
#           docker push ${{ secrets.DOCKER_FULL_REPO }}
          
    ## deploy to production
    #- name: Deploy to prod
#       uses: appleboy/ssh-action@master
#       id: deploy-prod
#       if: contains(github.ref, 'main')
#       with:
#           host: ${{ secrets.HOST_PROD }}
#           username: ${{ secrets.USERNAME }}
#           password: ${{ secrets.PASSWORD }}
#           port: 22
#           script: |
#               sudo docker pull ${{ secrets.DOCKER_FULL_REPO }} 
#               docker-compose up -d
#               docker image prune -f
              
    ## deploy to develop
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.OCI_HOST_DEV }}
        username: ${{ secrets.OCI_USERNAME }}
        key: ${{ secrets.OCI_PRI_KEY }}
        port: ${{ secrets.OCI_HOST_PORT_DEV }}
        script: | #sh deploy.sh
          uptime
          docker stop ${{ secrets.PROJECT_NAME }}
          docker rm ${{ secrets.PROJECT_NAME }}
          docker rmi ${{ secrets.DOCKER_FULL_REPO }}
          docker run -d -p 9999:9999 -e "SPRING_PROFILES_ACTIVE=dev" --name ${{ secrets.PROJECT_NAME }} ${{ secrets.DOCKER_FULL_REPO }}

#       uses: appleboy/ssh-action@master
#       id: deploy-dev
#       #if: contains(github.ref, 'develop')
#       with:
#         host: ${{ secrets.HOST_DEV }}
#         username: ${{ secrets.USERNAME }}
#         password: ${{ secrets.PASSWORD }}
#         port: 22
#         #key: ${{ secrets.PRIVATE_KEY }}
#         script: |
#             sudo docker pull ${{ secrets.DOCKER_FULL_REPO }
#             docker-compose up -d
#             docker image prune -f
            
  ## time
  current-time:
    needs: CI-CD
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash

  ## slack
  action-slack:
    needs: CI-CD
    runs-on: ubuntu-latest
    steps:
        - name: Slack Alarm
          uses: 8398a7/action-slack@v3
          with:
              status: ${{ job.status }}
              author_name: GitHub-Actions CI/CD
              fields: repo,message,commit,author,ref,job,took
          env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
          if: always() # Pick up events even if the job fails or is canceled.

## slack
#   action-slack:
#       uses: 8398a7/action-slack@v2.6.0
#       with:
#         status: ${{job.status}}
#         author_name: pmds
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required
#         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
